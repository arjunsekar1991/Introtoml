a <- 42
A <- a * 2  # R is case sensitive
print(a)
cat(A, "\n") # "84" is concatenated with "\n"
if(A>a) # true, 84 > 42
{
cat(A, ">", a, "\n")
}
source('~/Github/Introtoml/PAMAlgorithm-Seeds.R')
View(dataframe)
View(dataframe)
fviz_nbclust(df, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dataframe, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dataframe, pam, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
setwd("~/Github/Introtoml")
dataframe <- read.table("seeds_dataset.txt", header = FALSE)
colnames(dataframe)<- c("Area","Perimeter", "Compactness", "length of kernel","width of kernel","asymmetry coefficient","length of kernel groove","KRC")
print(str(dataframe))
#convert NSP into factor variable
dataframe$KRC <- as.factor(dataframe$KRC)
install.packages(c("cluster", "factoextra"))
library(cluster)
library(factoextra)
pam2.res <- pam(dataframe, 3,metric = "euclidean", stand = FALSE)
print(pam2.res)
clusplot(pam2.res, main = "Cluster plot, k = 3",
color = TRUE)
library(factoextra)
set.seed(123)
fviz_nbclust(dataframe,  pam, method = "wss") + geom_vline(xintercept = 4, linetype = 2)
install.packages(c("cluster", "factoextra"))
fviz_nbclust(dataframe,  pam, method = "wss") + geom_vline(xintercept = 4, linetype = 2)
source('~/Github/Introtoml/PAMAlgorithm-Seeds.R')
install.packages(c("cluster", "factoextra"))
fviz_nbclust(dataframe,  FUNcluster=pam, method = "wss") + geom_vline(xintercept = 4, linetype = 2)
library(factoextra)
fviz_nbclust(dataframe,  FUNcluster=pam, method = "wss") + geom_vline(xintercept = 4, linetype = 2)
source('~/Github/Introtoml/PAMAlgorithm-Seeds.R')
install.packages(c("cluster", "factoextra"))
fviz_nbclust(dataframe,  FUNcluster=PAM, method = "wss") + geom_vline(xintercept = 4, linetype = 2)
library(factoextra)
fviz_nbclust(dataframe,  FUNcluster=PAM, method = "wss") + geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dataframe,  FUNcluster=PAM, method = "wss") + geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dataframe,  FUNcluster=pam, method = "wss") + geom_vline(xintercept = 4, linetype = 2)
source('~/Github/Introtoml/PAMAlgorithm-Seeds.R')
source('~/Github/Introtoml/PAMAlgorithm-Seeds.R')
install.packages(c("cluster", "factoextra"))
fviz_nbclust(dist_df,  FUNcluster=PAM, method = "wss") + geom_vline(xintercept = 4, linetype = 2)
library(factoextra)
fviz_nbclust(dist_df,  FUNcluster=PAM, method = "wss") + geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(df, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dataframe, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dataframe, pam, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dataframe, pam, method = "sihoutte") +
geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dataframe, pam, method = "silhouette") +
geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dist_df,  FUNcluster=pam(dataframe, 3,metric = "euclidean", stand = FALSE), method = "wss") + geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dist_df,  FUNcluster=NbClust(data) method = "wss") +geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dist_df,  FUNcluster=NbClust(dataframe), method = "wss") +geom_vline(xintercept = 4, linetype = 2)
source('~/Github/Introtoml/PAMAlgorithm-Seeds.R')
df <- scale(dataframe)
View(dataframe)
View(dataframe)
df <- scale(dataframe[,-1])
df <- scale(dataframe[-1])
df <- scale(dataframe[-1,])
df <- scale(dataframe[-1])
fviz_nbclust(dist_df,  FUNcluster=NbClust(scale(dataframe), method = "wss") +geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dist_df,  FUNcluster=NbClust(scale(dataframe)), method = "wss") +geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dist_df,  FUNcluster=NbClust(scale(dataframe)), method = "wss") +geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(dist_df,  FUNcluster=NbClust(dataframe), method = "wss") +geom_vline(xintercept = 4, linetype = 2)
Nbclust(dataframe)
library('NbClust')
fviz_nbclust(dist_df,  FUNcluster=NbClust(dataframe), method = "wss") +geom_vline(xintercept = 4, linetype = 2)
Nbclust(dataframe)
sil_width = c(NA)
for(i in 2:10)
{
pam_fit = pam(gower_dist, diss = TRUE, k=i)
sil_width[i] = pam_fit$silinfo$avg.width
}
# Plot the silhoutte widths and see how many clusters is optimal (maximum value of sil_width)
plot(1:10,sil_width,xlab="Number of Clusters",ylab="Silhouette width")
lines(1:10, sil_width)
sil_width = c(NA)
for(i in 2:10)
{
pam_fit = pam(gower_dist, diss = TRUE, k=i)
sil_width[i] = pam_fit$silinfo$avg.width
}
gower_dist = daisy(dataframe,metric="gower")
# Checking the summary
summary(gower_dist)
# Now convert the distance list into a matrix
# This would create a 150x150 mattrix --> the distance between each pair of data points
gower_mat = as.matrix(gower_dist)
# We will iterate through 2-10 clusters and see which shows the maximum separation between centres
# The "Silhoutte Width" parameter is used by default for PAM clusters
sil_width = c(NA)
for(i in 2:10)
{
pam_fit = pam(gower_dist, diss = TRUE, k=i)
sil_width[i] = pam_fit$silinfo$avg.width
}
plot(1:10,sil_width,xlab="Number of Clusters",ylab="Silhouette width")
lines(1:10, sil_width)
source('~/Github/Introtoml/PAMAlgorithm-Seeds.R')
source('~/Github/Introtoml/PAMAlgorithm-Seeds.R')
install.packages(c("cluster", "factoextra"))
source('~/Github/Introtoml/PAMAlgorithm-Seeds.R')
source('~/Github/Introtoml/PAMAlgorithm-Seeds.R')
install.packages(c("cluster", "factoextra"))
source('~/Github/Introtoml/PAMAlgorithm-Seeds.R')
source('~/Github/Introtoml/PAMAlgorithm-Seeds.R')
